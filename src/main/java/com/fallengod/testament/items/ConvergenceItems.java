package com.fallengod.testament.items;

import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;

import java.util.Arrays;

public class ConvergenceItems {
    
    public static final NamespacedKey NEXUS_CROWN_KEY = new NamespacedKey("fallengod", "nexus_crown");
    public static final NamespacedKey OMNIPOTENT_SCEPTER_KEY = new NamespacedKey("fallengod", "omnipotent_scepter");
    public static final NamespacedKey DIVINE_CODEX_KEY = new NamespacedKey("fallengod", "divine_codex");
    
    public static ItemStack createNexusCrown() {
        ItemStack crown = new ItemStack(Material.NETHERITE_HELMET);
        ItemMeta meta = crown.getItemMeta();
        
        if (meta != null) {
            meta.setDisplayName("Â§6Â§lâœ¦ Crown of Divine Convergence âœ¦");
            meta.setLore(Arrays.asList(
                "Â§7The ultimate symbol of divine mastery,",
                "Â§7worn only by those who have united",
                "Â§7all twelve fallen gods under one will.",
                "",
                "Â§6Â§lEffects:",
                "Â§7â€¢ All Testament Powers Combined",
                "Â§7â€¢ +20 Hearts (30 total)",
                "Â§7â€¢ Immunity to All Damage Types",
                "Â§7â€¢ Flight (Creative Mode)",
                "Â§7â€¢ Infinite Resources",
                "Â§7â€¢ Reality Manipulation",
                "",
                "Â§8Â§l\"I am become Death, destroyer of worlds.\"",
                "Â§8Â§l\"I am become Life, creator of realms.\"",
                "",
                "Â§6Â§lCONVERGENCE NEXUS REWARD"
            ));
            
            // Ultimate enchantments
            meta.addEnchant(Enchantment.PROTECTION, 10, true);
            meta.addEnchant(Enchantment.FIRE_PROTECTION, 10, true);
            meta.addEnchant(Enchantment.PROJECTILE_PROTECTION, 10, true);
            meta.addEnchant(Enchantment.BLAST_PROTECTION, 10, true);
            meta.addEnchant(Enchantment.UNBREAKING, 20, true);
            meta.addEnchant(Enchantment.MENDING, 5, true);
            meta.addEnchant(Enchantment.RESPIRATION, 10, true);
            meta.addEnchant(Enchantment.AQUA_AFFINITY, 5, true);
            
            meta.getPersistentDataContainer().set(NEXUS_CROWN_KEY, PersistentDataType.BOOLEAN, true);
            meta.setEnchantmentGlintOverride(true);
            meta.setCustomModelData(100100); // Special model data for crown
            
            crown.setItemMeta(meta);
        }
        
        return crown;
    }
    
    public static ItemStack createOmnipotentScepter() {
        ItemStack scepter = new ItemStack(Material.STICK);
        ItemMeta meta = scepter.getItemMeta();
        
        if (meta != null) {
            meta.setDisplayName("Â§dÂ§lâš¡ Scepter of Omnipotence âš¡");
            meta.setLore(Arrays.asList(
                "Â§7A weapon that transcends all others,",
                "Â§7forged from the essence of twelve gods.",
                "",
                "Â§dÂ§lAbilities:",
                "Â§7â€¢ Right-click: Divine Judgment",
                "Â§7â€¢ Sneak + Right-click: Reality Warp",
                "Â§7â€¢ Attack: Omnislash (1000 damage)",
                "Â§7â€¢ Passive: All Weapon Abilities",
                "",
                "Â§8\"With this scepter, I command the very\"",
                "Â§8\"fabric of existence itself.\"",
                "",
                "Â§6Â§lCONVERGENCE NEXUS REWARD"
            ));
            
            // Ultimate weapon enchantments
            meta.addEnchant(Enchantment.SHARPNESS, 20, true);
            meta.addEnchant(Enchantment.UNBREAKING, 50, true);
            meta.addEnchant(Enchantment.MENDING, 10, true);
            meta.addEnchant(Enchantment.FIRE_ASPECT, 10, true);
            meta.addEnchant(Enchantment.KNOCKBACK, 5, true);
            meta.addEnchant(Enchantment.LOOTING, 10, true);
            
            meta.getPersistentDataContainer().set(OMNIPOTENT_SCEPTER_KEY, PersistentDataType.BOOLEAN, true);
            meta.setEnchantmentGlintOverride(true);
            meta.setCustomModelData(100101); // Special model data for scepter
            
            scepter.setItemMeta(meta);
        }
        
        return scepter;
    }
    
    public static ItemStack createDivineCodex() {
        ItemStack codex = new ItemStack(Material.WRITTEN_BOOK);
        ItemMeta meta = codex.getItemMeta();
        
        if (meta != null) {
            meta.setDisplayName("Â§bÂ§lðŸ“– Divine Codex of All Knowledge ðŸ“–");
            meta.setLore(Arrays.asList(
                "Â§7The complete knowledge of all twelve",
                "Â§7fallen gods, their powers, and the",
                "Â§7secrets of divine convergence.",
                "",
                "Â§bÂ§lContains:",
                "Â§7â€¢ All God Lore and Histories",
                "Â§7â€¢ Testament Completion Guides",
                "Â§7â€¢ Divine Power Combinations",
                "Â§7â€¢ Reality Manipulation Techniques",
                "Â§7â€¢ The True Names of the Gods",
                "",
                "Â§8\"Knowledge is the ultimate power.\"",
                "",
                "Â§6Â§lCONVERGENCE NEXUS REWARD"
            ));
            
            meta.addEnchant(Enchantment.UNBREAKING, 10, true);
            meta.getPersistentDataContainer().set(DIVINE_CODEX_KEY, PersistentDataType.BOOLEAN, true);
            meta.setEnchantmentGlintOverride(true);
            meta.setCustomModelData(100102); // Special model data for codex
            
            codex.setItemMeta(meta);
        }
        
        return codex;
    }
    
    public static boolean isNexusCrown(ItemStack item) {
        if (item == null || !item.hasItemMeta()) {
            return false;
        }
        ItemMeta meta = item.getItemMeta();
        return meta.getPersistentDataContainer().has(NEXUS_CROWN_KEY, PersistentDataType.BOOLEAN);
    }
    
    public static boolean isOmnipotentScepter(ItemStack item) {
        if (item == null || !item.hasItemMeta()) {
            return false;
        }
        ItemMeta meta = item.getItemMeta();
        return meta.getPersistentDataContainer().has(OMNIPOTENT_SCEPTER_KEY, PersistentDataType.BOOLEAN);
    }
    
    public static boolean isDivineCodex(ItemStack item) {
        if (item == null || !item.hasItemMeta()) {
            return false;
        }
        ItemMeta meta = item.getItemMeta();
        return meta.getPersistentDataContainer().has(DIVINE_CODEX_KEY, PersistentDataType.BOOLEAN);
    }
    
    public static boolean isConvergenceItem(ItemStack item) {
        return isNexusCrown(item) || isOmnipotentScepter(item) || isDivineCodex(item);
    }
}